#pragma kernel Main

#define TWO_PI 6.28318530717958647693
#define MAX_ZONES 20
#define GRASS_SEGMENTS 3
#define GRASS_NUM_VERTICES_PER_BLADE (GRASS_SEGMENTS * 2)+ 1

struct SourceVertex
{
    float3 positionWS;
    float3 normalOS;
    float2 uv;
    float3 color;
};

struct DrawVertex
{
    float3 positionWS;
    float2 uv;
};

struct DrawTriangle
{
    float3 normalOS;
    float3 diffuseColor;
    float4 extraBuffer; // x: cut, y: distanceFade
    DrawVertex vertices[3];
};

struct IndirectArgs
{
    uint numVerticesPerInstance;
    uint numInstances;
    uint startVertexIndex;
    uint startInstanceIndex;
};

StructuredBuffer<SourceVertex> _SourceVertices;
StructuredBuffer<int> _VisibleIDBuffer;
StructuredBuffer<float> _CutBuffer;
AppendStructuredBuffer<DrawTriangle> _DrawTriangles;
RWStructuredBuffer<IndirectArgs> _IndirectArgsBuffer;

int _NumSourceVertices;
float _Time;
float _GrassRandomHeightMin, _GrassRandomHeightMax;
float _WindSpeed;
float _WindStrength;
float2 _WindDirection;
float _BladeRadius;
float _BladeForward;
float _BladeCurve;
float _BottomWidth;
float _MaxBladesPerVertex;
float _MaxSegmentsPerBlade;
float _MinHeight, _MaxHeight;
float _MinWidth, _MaxWidth;
float _MinFadeDist, _MaxFadeDist;
float _InteractorStrength;
uniform float4 _InteractorData[100];
uniform float _InteractorsLength;
uniform float3 _CameraPositionWS;

float4 _ZonePositions[MAX_ZONES];
float4 _ZoneScales[MAX_ZONES];
float4 _ZoneColors[MAX_ZONES];
float4 _ZoneWidthHeights[MAX_ZONES];
int _ZoneCount;

float random(float3 co)
{
    return frac(sin(dot(co.xyz, float3(12.9898, 78.233, 53.539))) * 43758.5453);
}

float RandomRange(float3 seed, float min, float max)
{
    float rand = random(seed);
    return lerp(min, max, rand);
}

float Hash3DToFloat01(float3 pos, uint index)
{
    uint x = asuint(pos.x * 100);
    uint y = asuint(pos.y * 100);
    uint z = asuint(pos.z * 100);
    uint hash = x ^ y << 8 ^ z << 16 ^ index;

    hash ^= hash >> 16;
    hash *= 0x7feb352dU;
    hash ^= hash >> 15;
    hash *= 0x846ca68bU;
    hash ^= hash >> 16;

    // Convert to float in [0,1] range
    return float(hash & 0xFFFFFF) / 0x1000000;
}

float3x3 AngleAxis3x3(float angle, float3 axis)
{
    float c, s;
    sincos(angle, s, c);

    float t = 1 - c;
    float x = axis.x;
    float y = axis.y;
    float z = axis.z;

    return float3x3(
        t * x * x + c, t * x * y - s * z, t * x * z + s * y,
        t * x * y + s * z, t * y * y + c, t * y * z - s * x,
        t * x * z - s * y, t * y * z + s * x, t * z * z + c);
}

float3x3 CreateTangentToWorld(float3 normal)
{
    float3 tangentX = float3(-normal.y, normal.x, 0); // x축 기준 탄젠트 계산
    float3 tangentZ = float3(0, -normal.z, normal.y); // z축 기준 탄젠트 계산

    // normal.x와 normal.z의 상대적 크기에 따라 보간
    float blendFactor = smoothstep(0.0, 1.0, abs(normal.x) / (abs(normal.x) + abs(normal.z)));

    // 두 탄젠트 벡터를 블렌딩
    float3 tangent = normalize(lerp(tangentZ, tangentX, blendFactor));

    float3 bitangent = normalize(cross(normal, tangent));

    return float3x3(
        tangent.x, normal.x, bitangent.x,
        tangent.y, normal.y, bitangent.y,
        tangent.z, normal.z, bitangent.z
    );
}

bool IsInAnyZone(float3 position, out int zoneIndex)
{
    zoneIndex = -1;
    for (int i = _ZoneCount - 1; i >= 0; i--)
    {
        if (_ZonePositions[i].w < 0.5) continue;

        float3 delta = abs(position - _ZonePositions[i].xyz);
        float3 halfScale = _ZoneScales[i].xyz * 0.5;

        // 모든 축에 대해 범위 안에 있는지 체크
        bool isInside = all(delta <= halfScale);

        zoneIndex = lerp(zoneIndex, i, isInside);
        if (isInside) return true;
    }
    return false;
}

DrawVertex GrassVertex(float3 pos, float width, float heightRatio, float height, float offset, float3x3 faceRot,
                       float3x3 tanWorld)
{
    DrawVertex output;
    float3 offsetVec = float3(width, height * heightRatio, pow(abs(heightRatio), _BladeCurve) * _BladeForward + offset);
    output.positionWS = pos + mul(faceRot, mul(tanWorld, offsetVec));
    output.uv = float2(width > 0 ? 0 : 1, heightRatio);
    return output;
}

half3 CalculationWind(half3 positionWS, half grassHeight)
{
    half timeWind = _Time * _WindSpeed;
    half windValue = sin(timeWind + dot(positionWS.xz, _WindDirection));

    // 높이에 따른 가중치 계산 (0~1 사이로 제한)
    half heightFactor = saturate(grassHeight);

    // wind 방향 벡터 생성
    half3 windDirection = half3(_WindDirection.x * windValue, 0, _WindDirection.y * windValue);

    // 최종 wind 힘 계산 (높이가 커져도 _WindStrength를 넘지 않음)
    return windDirection * min(heightFactor * _WindStrength, _WindStrength);
}

struct InteractionResult
{
    float3 bendOffset;
    float windAttenuation;
};

InteractionResult CalculateInteraction(float3 grassPosition, half grassHeight, half cut)
{
    InteractionResult result;
    result.bendOffset = 0;
    result.windAttenuation = 0;

    if (abs(cut + 1) > 0.001) return result; // 잘린 잔디는 효과 무시

    for (int i = 0; i < _InteractorsLength; i++)
    {
        float3 interactorPos = _InteractorData[i].xyz;
        float interactorRadius = _InteractorData[i].w;
        float3 distanceVector = grassPosition - interactorPos;
        float distance = length(distanceVector);

        if (distance < interactorRadius && _InteractorStrength > 0) // interactorStrength가 0이면 아예 작동 안하도록
        {
            float normalizedDist = distance / interactorRadius;
            float influence = 1.0 - (normalizedDist * normalizedDist * normalizedDist);
            result.windAttenuation = max(result.windAttenuation, influence);

            float3 bendDirection = normalize(distanceVector);
            float bendStrength = _InteractorStrength * influence;
            bendDirection.y = -(bendStrength * 2);

            float3 bend = bendDirection * grassHeight;
            result.bendOffset = lerp(result.bendOffset, bend, bendStrength); // 여기도 bendStrength 사용
        }
    }

    return result;
}

[numthreads(256, 1, 1)]
void Main(uint id : SV_DispatchThreadID)
{
    if ((int)id >= _NumSourceVertices) return;

    int visibleID = _VisibleIDBuffer[id];
    if (visibleID == -1) return;

    SourceVertex sv = _SourceVertices[visibleID];

    half distanceFromCamera = distance(sv.positionWS, _CameraPositionWS);
    half distanceFade = 1 - saturate((distanceFromCamera - _MinFadeDist) / (_MaxFadeDist - _MinFadeDist));
    if (distanceFade <= 0) return;

    uint localVertexCount = 0;
    half cut = _CutBuffer[visibleID];

    half randomOffset = lerp(_GrassRandomHeightMin, _GrassRandomHeightMax, Hash3DToFloat01(sv.positionWS, 0));

    half grassWidth = sv.uv.x;
    half grassHeight = sv.uv.y;

    grassWidth = clamp(grassWidth, _MinWidth, _MaxWidth);
    grassHeight = clamp(grassHeight + randomOffset, _MinHeight, _MaxHeight);

    int zoneIndex;
    half3 baseColor = sv.color;
    if (IsInAnyZone(sv.positionWS, zoneIndex))
    {
        half randomValue = Hash3DToFloat01(sv.positionWS, visibleID) * 0.3;
        baseColor = _ZoneColors[zoneIndex].rgb + randomValue;
        grassHeight *= _ZoneWidthHeights[zoneIndex].y;
        grassWidth *= _ZoneWidthHeights[zoneIndex].x;
    }

    half finalSizeFade = lerp(0.3, 1, distanceFade);

    grassWidth *= finalSizeFade * finalSizeFade;
    grassHeight *= finalSizeFade;

    _BladeForward *= grassHeight;

    InteractionResult interaction = CalculateInteraction(sv.positionWS, grassHeight, cut);

    half3 wind = CalculationWind(sv.positionWS, grassHeight);
    half3 finalWind = wind * lerp(1.0, 0.1, interaction.windAttenuation);

    half numTrianglesPerBlade = (_MaxSegmentsPerBlade - 1) * 2 + 1;

    half3 grassNormal = normalize(sv.normalOS);
    float3x3 tangentToWorld = CreateTangentToWorld(grassNormal);

    uint numBlades = round(_MaxBladesPerVertex * distanceFade);
    for (uint j = 0; j < numBlades; j++)
    {
        DrawVertex drawVertices[GRASS_NUM_VERTICES_PER_BLADE];
        float3x3 facingRotationMatrix = AngleAxis3x3(Hash3DToFloat01(sv.positionWS, j) * TWO_PI, grassNormal);
        float bladeRadius = j / _MaxBladesPerVertex;
        float offset = (1 - bladeRadius) * _BladeRadius;

        for (int i = 0; i < _MaxSegmentsPerBlade; i++)
        {
            float heightRatio = i / _MaxSegmentsPerBlade;
            float3 pos = sv.positionWS + (finalWind + grassNormal * grassHeight + interaction.bendOffset) * heightRatio;
            float segWidth = grassWidth * _BottomWidth * (1 - heightRatio);

            drawVertices[i * 2] = GrassVertex(pos, segWidth, heightRatio, grassHeight, offset, facingRotationMatrix,
                                              tangentToWorld);
            drawVertices[i * 2 + 1] = GrassVertex(pos, -segWidth, heightRatio, grassHeight, offset,
                                                  facingRotationMatrix,
                                                  tangentToWorld);
        }

        float3 topPos = sv.positionWS + finalWind + interaction.bendOffset + grassNormal * grassHeight;
        drawVertices[_MaxSegmentsPerBlade * 2] = GrassVertex(topPos, 0, 1, grassHeight, offset, facingRotationMatrix,
                                                             tangentToWorld);

        for (int k = 0; k < numTrianglesPerBlade; ++k)
        {
            DrawTriangle tri = (DrawTriangle)0;
            tri.normalOS = grassNormal;
            tri.diffuseColor = baseColor;
            tri.extraBuffer = half4(cut, 0, 0, 0);

            tri.vertices[0] = drawVertices[k];
            tri.vertices[1] = drawVertices[k + 1];
            tri.vertices[2] = drawVertices[k + 2];
            _DrawTriangles.Append(tri);

            localVertexCount += 3;
        }
    }

    // uint finalLocalVertexCount = (_MaxBladesPerVertex * distanceFade) * numTrianglesPerBlade * 3;
    // 윗줄처럼 한번에 계산하지 않고 for문에서 localVertexCount += 3 을 한 이유는
    // 1. 나중에 조건부로 삼각형 생성을 건너뛰는 경우가 생길 수 있고
    // 2. 실제로 생성된 삼각형의 수를 추적하기 편할 수 있으며
    // 3. 각 삼각형이 생성될 때마다 버텍스 수를 증가시키는 것이 논리적 흐름에 맞기 때문
    // 1,2,3을 다 무시해도 되는 경우 한번에 계산하는 것이 편리해보임.
    InterlockedAdd(_IndirectArgsBuffer[0].numVerticesPerInstance, localVertexCount);
}
