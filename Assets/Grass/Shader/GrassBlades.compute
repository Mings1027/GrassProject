#pragma kernel Main

#define TWO_PI      6.28318530717958647693

// Structure representing vertices of the source mesh
struct SourceVertex
{
    float3 positionWS; // Position in world space
    float3 normalOS; // Normal in object space
    float2 uv; // UV coordinates including width and height scale
    float3 color; // Color value
};

StructuredBuffer<SourceVertex> _SourceVertices; // Buffer to store source vertices
StructuredBuffer<int> _VisibleIDBuffer; // Buffer to store visibility IDs
StructuredBuffer<float> _CutBuffer; // Buffer for cutting grass

// Structure representing vertices of the generated mesh
struct DrawVertex
{
    float3 positionWS; // Position in world space
    float2 uv; // UV coordinates
};

// Structure representing triangles of the generated mesh
struct DrawTriangle
{
    float3 normalOS; // Normal in object space
    float3 diffuseColor; // Diffuse color
    float4 extraBuffer; // Additional data buffer
    DrawVertex vertices[3]; // Three vertices that mask up the triangle
};

// Buffer for storing the generated mesh
AppendStructuredBuffer<DrawTriangle> _DrawTriangles; // Only push is allowed, read-only

// _argsBuffer for GrassCompute script
struct IndirectArgs
{
    uint numVerticesPerInstance; // Number of vertices per instance
    uint numInstances; // Number of instances
    uint startVertexIndex; // Starting vertex index
    uint startInstanceIndex; // Starting instance index
    // uint startLocation;
};

RWStructuredBuffer<IndirectArgs> _IndirectArgsBuffer; // Read-write buffer

// Limited values since the buffer size needs to be specified in GrassCompute
#define GRASS_BLADES 10 // Number of grass blades per vertex
#define GRASS_SEGMENTS 3 // Number of segments per blade
#define GRASS_NUM_VERTICES_PER_BLADE (GRASS_SEGMENTS * 2)+ 1 // Number of vertices per blade

// ----------------------------------------

/* ==============================
    Values passed from GrassCompute - Start
===============================*/
int _NumSourceVertices; // Number of source vertices
float _Time; // Time Value

// Grass settings
float _GrassRandomHeightMin, _GrassRandomHeightMax; // Min and max random height values 

// Wind settings
float _WindSpeed;
float _WindStrength;

// Interactor settings
float _InteractorStrength; // 인터랙터의 강도

// Blade settings
float _BladeRadius;
float _BladeForward;
float _BladeCurve;
float _BottomWidth; // Bottom width of the blade
float _MaxBladesPerVertex;
float _MaxSegmentsPerBlade;
float _MinHeight, _MaxHeight;
float _MinWidth, _MaxWidth;

// Camera settings
float _MinFadeDist, _MaxFadeDist;

// Uniforms
uniform float4 _PositionsMoving[100]; // Positions of moving objects
uniform float _InteractorsLength; // Length of the interactors
uniform float3 _CameraPositionWS; // Camera position in world space
/* ==============================
    Values passed from GrassCompute - End
===============================*/

float _GrassHeight;
float _GrassWidth;

// ----------------------------------------
// Helper Functions

// Random generation function
float rand(float3 co)
{
    return frac(sin(dot(co.xyz, float3(12.9898, 78.233, 53.539))) * 43758.5453);
}

// Function to generate a random value within a given range
float RandomRange(float2 seed, float min, float max)
{
    float rand = frac(sin(dot(seed, float2(12.9898, 78.233))) * 43758.5453);
    return lerp(min, max, rand);
}

// Function to create a rotation matrix that rotates around a given axis by a specified angle
// By Keijiro Takahashi
float3x3 AngleAxis3x3(float angle, float3 axis)
{
    float c, s;
    sincos(angle, s, c);

    float t = 1 - c;
    float x = axis.x;
    float y = axis.y;
    float z = axis.z;

    return float3x3(
        t * x * x + c, t * x * y - s * z, t * x * z + s * y,
        t * x * y + s * z, t * y * y + c, t * y * z - s * x,
        t * x * z - s * y, t * y * z + s * x, t * z * z + c);
}

float3x3 CreateTangentToWorld(float3 normal)
{
    // 1. 노말과 수직인 tangent 벡터 생성
    float3 tangent;
    if (abs(normal.x) > abs(normal.z))
        tangent = float3(-normal.y, normal.x, 0);
    else
        tangent = float3(0, -normal.z, normal.y);
    tangent = normalize(tangent);

    // 2. 노말과 tangent로부터 bitangent 생성
    float3 bitangent = normalize(cross(normal, tangent));

    // 3. 노말 공간 기준의 변환 행렬 생성
    return float3x3(
        tangent.x, normal.x, bitangent.x,
        tangent.y, normal.y, bitangent.y,
        tangent.z, normal.z, bitangent.z
    );
}

// 4. 수정된 잔디 blade 생성 함수
DrawVertex GrassVertex(float3 positionWS, float width, float height,
                       float offset, float2 uv, float curve, float3 normal, float3x3 rotationMatrix)
{
    DrawVertex output;

    // 1. 노말 기준 로컬 좌표계 생성
    float3x3 tangentToWorld = CreateTangentToWorld(normal);

    // 2. blade의 로컬 오프셋 계산
    float3 localOffset = float3(width, height, curve + offset);

    // 3. 로컬 좌표계에서 월드 좌표계로 변환하고 회전 적용
    float3 worldOffset = mul(tangentToWorld, localOffset);
    worldOffset = mul(rotationMatrix, worldOffset);

    output.positionWS = positionWS + worldOffset;
    output.uv = uv;
    return output;
}

float3 WindCalculation(float3 positionWS)
{
    float timeWind = _Time.x * _WindSpeed; // Time value based on wind speed
    float posX = positionWS.x; // X position of the vertex
    float posZ = positionWS.z; // Z position of the vertex
    float3 wind = float3(
        sin(timeWind + posX) + sin(timeWind + posZ * 2) + sin(timeWind * 0.1 + posX),
        0,
        cos(timeWind + posX * 2) + cos(timeWind + posZ)); // Calculate wind vector
    wind *= _WindStrength; // Apply wind strength
    return wind;
}

half3 CalculateInteractor(float3 positionWS)
{
    half3 totalForce = 0;
    for (int i = 0; i < _InteractorsLength; i++)
    {
        float4 interactorData = _PositionsMoving[i];
        float3 interactorPos = interactorData.xyz;
        float interactorRadius = interactorData.w;

        float3 offsetToInteractor = positionWS - interactorPos;
        float distanceToInteractor = length(offsetToInteractor);

        if (distanceToInteractor < interactorRadius)
        {
            float normalizedDistance = distanceToInteractor / interactorRadius;
            float interactionStrength = (1 - normalizedDistance) * _InteractorStrength;

            float3 direction = normalize(offsetToInteractor);
            float3 horizontalForce = float3(direction.x, 0, direction.z) * interactionStrength;
            float3 verticalForce = float3(0, -0.3, 0) * interactionStrength;

            totalForce += horizontalForce + verticalForce;
        }
    }
    float maxForce = 2.0;
    return clamp(totalForce, -maxForce, maxForce);
}

// ----------------------------------------

// The main kernel
[numthreads(256, 1, 1)]
void Main(uint id : SV_DispatchThreadID)
{
    // Return if every point has been processed
    if ((int)id >= _NumSourceVertices) return;

    // Retrieve data from the visibility ID buffer
    int visibleID = _VisibleIDBuffer[id];
    if (visibleID == -1) return; // -1 ID indicates culled => do not draw

    // Retrieve the source vertex corresponding to the visibility ID
    SourceVertex sv = _SourceVertices[visibleID];

    // Calculate distance from the camera and determine fade value
    float distanceFromCamera = distance(sv.positionWS, _CameraPositionWS);
    float distanceFade = 1 - saturate((distanceFromCamera - _MinFadeDist) / (_MaxFadeDist - _MinFadeDist));

    // Do not draw if outside the fading range
    if (distanceFade < 0) return;

    half numBladesPerVertex = min(GRASS_BLADES, max(1, _MaxBladesPerVertex)); // Set the number of blades per vertex
    half numSegmentsPerBlade = min(GRASS_SEGMENTS, max(1, _MaxSegmentsPerBlade));
    // Set the number of segments per blade
    half numTrianglesPerBlade = (numSegmentsPerBlade - 1) * 2 + 1; // Triangles per blade

    // Set normals
    half3 faceNormal = normalize(sv.normalOS);

    _GrassWidth = sv.uv.x;
    _GrassHeight = sv.uv.y;

    // Use local variables to process each thread
    uint localVertexCount = 0;
    half cut = _CutBuffer[visibleID];
    // Random height offsets
    half randomOffset = RandomRange(sv.positionWS.xz, _GrassRandomHeightMin, _GrassRandomHeightMax);
    _GrassHeight = clamp(_GrassHeight + randomOffset, _MinHeight, _MaxHeight);
    _GrassWidth = clamp(_GrassWidth, _MinWidth, _MaxWidth);
    _GrassWidth *= saturate(distanceFade);
    _BladeForward *= _GrassHeight;

    half3 wind = WindCalculation(sv.positionWS);

    // Loop to create blade per vertex
    for (int j = 0; j < numBladesPerVertex * distanceFade; j++)
    {
        // Vertices arrays
        DrawVertex drawVertices[GRASS_NUM_VERTICES_PER_BLADE];
        // Set rotation and radius of the blades
        half randomAngle = RandomRange(half2(sv.positionWS.x + j, sv.positionWS.z + j), 0, TWO_PI);
        half3x3 facingRotationMatrix = AngleAxis3x3(randomAngle, faceNormal);

        half bladeRadius = j / numBladesPerVertex;
        half offset = (1 - bladeRadius) * _BladeRadius;

        half3 totalMovement = 0;
        if (cut < sv.positionWS.y + 0.5)
        {
            totalMovement = CalculateInteractor(sv.positionWS);
        }
        // create blade
        for (int i = 0; i < numSegmentsPerBlade; i++)
        {
            half t = i / numSegmentsPerBlade;
            half segmentHeight = _GrassHeight * t;
            half segmentWidth = _GrassWidth * (1 - t);

            segmentWidth = i == 0 ? _BottomWidth * segmentWidth : segmentWidth;

            half3 newPos = i == 0
                               ? sv.positionWS
                               : sv.positionWS + totalMovement * t + wind * t + faceNormal * _GrassHeight * t;
            half curveStrength = pow(abs(t), _BladeCurve) * _BladeForward;

            // vertices 생성
            drawVertices[i * 2] = GrassVertex(newPos, segmentWidth, segmentHeight,
                                              offset, half2(0, t), curveStrength, faceNormal, facingRotationMatrix);
            drawVertices[i * 2 + 1] = GrassVertex(newPos, -segmentWidth, segmentHeight,
                                                  offset, half2(1, t), curveStrength, faceNormal,
                                                  facingRotationMatrix);
        }

        half3 topPosOS = sv.positionWS + totalMovement + wind + faceNormal * _GrassHeight;
        drawVertices[numSegmentsPerBlade * 2] = GrassVertex(topPosOS, 0, _GrassHeight, offset,
                                                            half2(0.5, 1), _BladeForward, faceNormal,
                                                            facingRotationMatrix);

        for (int k = 0; k < numTrianglesPerBlade; ++k)
        {
            DrawTriangle tri = (DrawTriangle)0;
            tri.normalOS = faceNormal;
            tri.diffuseColor = sv.color;
            tri.extraBuffer = half4(cut, 0, 0, 0);

            tri.vertices[0] = drawVertices[k];
            tri.vertices[1] = drawVertices[k + 1];
            tri.vertices[2] = drawVertices[k + 2];
            _DrawTriangles.Append(tri);

            localVertexCount += 3;
        }
    }

    // add to indirect arguments buffer with the correct vertexcount       
    InterlockedAdd(_IndirectArgsBuffer[0].numVerticesPerInstance, localVertexCount);
}
