#pragma kernel Main

#define TWO_PI      6.28318530717958647693

// Structure representing vertices of the source mesh
struct SourceVertex
{
    float3 positionWS; // Position in world space
    float3 normalOS; // Normal in object space
    float2 uv; // UV coordinates including width and height scale
    float3 color; // Color value
};

StructuredBuffer<SourceVertex> _SourceVertices; // Buffer to store source vertices
StructuredBuffer<int> _VisibleIDBuffer; // Buffer to store visibility IDs
StructuredBuffer<float> _CutBuffer; // Buffer for cutting grass

// Structure representing vertices of the generated mesh
struct DrawVertex
{
    float3 positionWS; // Position in world space
    float2 uv; // UV coordinates
};

// Structure representing triangles of the generated mesh
struct DrawTriangle
{
    float3 normalOS; // Normal in object space
    float3 diffuseColor; // Diffuse color
    float4 extraBuffer; // Additional data buffer
    DrawVertex vertices[3]; // Three vertices that mask up the triangle
};

// Buffer for storing the generated mesh
AppendStructuredBuffer<DrawTriangle> _DrawTriangles; // Only push is allowed, read-only

// _argsBuffer for GrassCompute script
struct IndirectArgs
{
    uint numVerticesPerInstance; // Number of vertices per instance
    uint numInstances; // Number of instances
    uint startVertexIndex; // Starting vertex index
    uint startInstanceIndex; // Starting instance index
    // uint startLocation;
};

RWStructuredBuffer<IndirectArgs> _IndirectArgsBuffer; // Read-write buffer

// Limited values since the buffer size needs to be specified in GrassCompute
#define GRASS_BLADES 10 // Number of grass blades per vertex
#define GRASS_SEGMENTS 3 // Number of segments per blade
#define GRASS_NUM_VERTICES_PER_BLADE (GRASS_SEGMENTS * 2)+ 1 // Number of vertices per blade

// ----------------------------------------

/* ==============================
    Values passed from GrassCompute - Start
===============================*/
int _NumSourceVertices; // Number of source vertices
float _Time; // Time Value

// Grass settings
float _GrassRandomHeightMin, _GrassRandomHeightMax; // Min and max random height values 

// Wind settings
float _WindSpeed;
float _WindStrength;

// Interactor settings
float _InteractorStrength; // 인터랙터의 강도

// Blade settings
float _BladeRadius;
float _BladeForward;
float _BladeCurve;
float _BottomWidth; // Bottom width of the blade
float _MaxBladesPerVertex;
float _MaxSegmentsPerBlade;
float _MinHeight, _MaxHeight;
float _MinWidth, _MaxWidth;

// Camera settings
float _MinFadeDist, _MaxFadeDist;

// Uniforms
uniform float4 _PositionsMoving[100]; // Positions of moving objects
uniform float _InteractorsLength; // Length of the interactors
uniform float3 _CameraPositionWS; // Camera position in world space
/* ==============================
    Values passed from GrassCompute - End
===============================*/

float _GrassHeight;
float _GrassWidth;

// ----------------------------------------
// Helper Functions

// Random generation function
float rand(float3 co)
{
    return frac(sin(dot(co.xyz, float3(12.9898, 78.233, 53.539))) * 43758.5453);
}

// Function to generate a random value within a given range
float RandomRange(float2 Seed, float Min, float Max)
{
    float rand = frac(sin(dot(Seed, float2(12.9898, 78.233))) * 43758.5453);
    return lerp(Min, Max, rand);
}

// Function to create a rotation matrix that rotates around a given axis by a specified angle
// By Keijiro Takahashi
float3x3 AngleAxis3x3(float angle, float3 axis)
{
    float c, s;
    sincos(angle, s, c);

    float t = 1 - c;
    float x = axis.x;
    float y = axis.y;
    float z = axis.z;

    return float3x3(
        t * x * x + c, t * x * y - s * z, t * x * z + s * y,
        t * x * y + s * z, t * y * y + c, t * y * z - s * x,
        t * x * z - s * y, t * y * z + s * x, t * z * z + c);
}

DrawVertex GrassVertex(float3 positionWS, float width, float height,
                       float offset, float curve, float2 uv, float3x3 rotation)
{
    DrawVertex output;
    output.positionWS = positionWS + mul(rotation, float3(width, height, curve + offset));
    output.uv = uv;
    return output;
}

float3 WindCalculation(float3 positionWS)
{
    float timeWind = _Time.x * _WindSpeed; // Time value based on wind speed
    float posX = positionWS.x; // X position of the vertex
    float posZ = positionWS.z; // Z position of the vertex
    float3 wind = float3(
        sin(timeWind + posX) + sin(timeWind + posZ * 2) + sin(timeWind * 0.1 + posX),
        0,
        cos(timeWind + posX * 2) + cos(timeWind + posZ)); // Calculate wind vector
    wind *= _WindStrength; // Apply wind strength
    return wind;
}

// ----------------------------------------

// The main kernel
[numthreads(128, 1, 1)]
void Main(uint id : SV_DispatchThreadID)
{
    // Return if every point has been processed
    if ((int)id >= _NumSourceVertices) return;

    // Retrieve data from the visibility ID buffer
    int visibleID = _VisibleIDBuffer[id];
    if (visibleID == -1) return; // -1 ID indicates culled => do not draw

    // Retrieve the source vertex corresponding to the visibility ID
    SourceVertex sv = _SourceVertices[visibleID];

    // Calculate distance from the camera and determine fade value
    float distanceFromCamera = distance(sv.positionWS, _CameraPositionWS);
    float distanceFade = 1 - saturate((distanceFromCamera - _MinFadeDist) / (_MaxFadeDist - _MinFadeDist));

    // Do not draw if outside the fading range
    if (distanceFade < 0) return;

    // Blades & Segments
    int numBladesPerVertex = min(GRASS_BLADES, max(1, _MaxBladesPerVertex)); // Set the number of blades per vertex
    int numSegmentsPerBlade = min(GRASS_SEGMENTS, max(1, _MaxSegmentsPerBlade)); // Set the number of segments per blade
    // -1 is because the top part of the grass only has 1 triangle
    int numTrianglesPerBlade = (numSegmentsPerBlade - 1) * 2 + 1; // Triangles per blade

    // Set normals
    float3 faceNormal = sv.normalOS; // Normal in object space
    
    float cut = _CutBuffer[visibleID];
    // if (cut != -1)
    // {
    //     sv.color = float3(0, 0, 0);
    // }
    
    float3 wind = WindCalculation(sv.positionWS);

    _GrassHeight = sv.uv.y;
    _GrassWidth = sv.uv.x; // UV.x == width multiplier (set in GrassPainter.cs)
    float randomisedPos = rand(sv.positionWS.xyz);
    // Random height offsets
    float randomOffset = RandomRange(sv.positionWS.xz, _GrassRandomHeightMin, _GrassRandomHeightMax);
    _GrassHeight = clamp(_GrassHeight + randomOffset, _MinHeight, _MaxHeight);
    _GrassWidth = clamp(_GrassWidth, _MinWidth, _MaxWidth);
    _GrassWidth *= saturate(distanceFade);
    _BladeForward *= _GrassHeight;

    // Use local variables to process each thread
    uint localVertexCount = 0;

    // Loop to create blade per vertex
    for (int j = 0; j < numBladesPerVertex * distanceFade; j++)
    {
        // Vertices arrays
        DrawVertex drawVertices[GRASS_NUM_VERTICES_PER_BLADE];
        // Set rotation and radius of the blades
        float3x3 facingRotationMatrix = AngleAxis3x3(randomisedPos * TWO_PI + j, faceNormal);

        float bladeRadius = j / (float)numBladesPerVertex;
        float offset = (1 - bladeRadius) * _BladeRadius;

        float3 totalMovement = 0;

        // Does not respond to the interactor if the grass has been cut
        if (cut < sv.positionWS.y + 0.5)
        {
            float3 offsetWorldPos = sv.positionWS + mul(facingRotationMatrix, float3(0, 0, offset));
            // For grass interaction in GrassInteractor.cs
            for (int p = 0; p < _InteractorsLength; p++)
            {
                // Calculate the vector from the vertex to the interactor (interaction object)
                float3 vertexToInteractor = offsetWorldPos - _PositionsMoving[p].xyz;

                // Direction vertor from the vertex to the interactor
                float3 directionToInteractor = normalize(vertexToInteractor);

                // Calculate the distance between the interactor and the vertex
                float distanceToInteractor = abs(length(vertexToInteractor)) + _PositionsMoving[p].w;

                // Calculate the offset on the XZ plane
                float3 xzOffset = float3(directionToInteractor.x, 0, directionToInteractor.z) * distanceToInteractor;

                // Calculate the movement amount caused by the interactor
                float3 interactorMovement = xzOffset * _InteractorStrength - float3(0, distanceToInteractor * 1, 0);

                // Calculate the distance between the vertex and the interactor
                float3 vertexDistance = distance(_PositionsMoving[p].xyz, offsetWorldPos);

                // Interaction intensity within the interactor radius (restricted to the range of 0 to 1)
                float3 interactionRadius = 1 - saturate(vertexDistance / _PositionsMoving[p].w);

                // Adjust movement amount based on interaction radius
                interactorMovement *= interactionRadius;

                // Sum up the movement amounts from all interactors
                totalMovement += interactorMovement;
            }
        }
        // create blade
        for (int i = 0; i < numSegmentsPerBlade; i++)
        {
            // taper width, increase height
            float t = i / (float)numSegmentsPerBlade;
            float segmentHeight = _GrassHeight * t;
            float segmentWidth = _GrassWidth * (1 - t); // Width of the grass blade 

            // The first (0) grass segment is thinner
            segmentWidth = i == 0 ? _BottomWidth * segmentWidth : segmentWidth; // Adjust the width using the _BottomWidth value

            float segmentForward = pow(abs(t), _BladeCurve) * _BladeForward;
            // First grass (0) segment does not get displaced by interactor
            // Adjust position in the normal direction
            float3 newPos = i == 0
                                ? sv.positionWS
                                : sv.positionWS + totalMovement * t + wind * t + faceNormal * _GrassHeight * t;

            // Append First Vertex        
            drawVertices[i * 2] = GrassVertex(newPos, segmentWidth, segmentHeight, offset, segmentForward,
                                              float2(0, t), facingRotationMatrix);
            // Append Second Vertex
            drawVertices[i * 2 + 1] = GrassVertex(newPos, -segmentWidth, segmentHeight, offset, segmentForward,
                                                  float2(1, t), facingRotationMatrix);
        }
        // Append Top Vertex
        float3 topPosOS = sv.positionWS + totalMovement + wind + faceNormal * _GrassHeight;
        drawVertices[numSegmentsPerBlade * 2] = GrassVertex(topPosOS, 0, _GrassHeight, offset, _BladeForward,
                                                            float2(0.5, 1), facingRotationMatrix);
        
        // Add to the drawbuffer to be read by the final shader
        for (int k = 0; k < numTrianglesPerBlade; ++k)
        {
            DrawTriangle tri = (DrawTriangle)0;
            tri.normalOS = faceNormal;
            tri.diffuseColor = sv.color;
            tri.extraBuffer = float4(cut, 0, 0, 0);
            tri.vertices[0] = drawVertices[k];
            tri.vertices[1] = drawVertices[k + 1];
            tri.vertices[2] = drawVertices[k + 2];
            _DrawTriangles.Append(tri);

            localVertexCount += 3;
        }
    }

    // add to indirect arguments buffer with the correct vertexcount       
    InterlockedAdd(_IndirectArgsBuffer[0].numVerticesPerInstance, localVertexCount);
}
