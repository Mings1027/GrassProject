#pragma kernel Main

#define TWO_PI      6.28318530717958647693
#define MAX_ZONES 9
#define GRASS_SEGMENTS 3
#define GRASS_NUM_VERTICES_PER_BLADE (GRASS_SEGMENTS * 2)+ 1

struct SourceVertex
{
    float3 positionWS;
    float3 normalOS;
    float2 uv;
    float3 color;
};

struct DrawVertex
{
    float3 positionWS;
    float2 uv;
};

struct DrawTriangle
{
    float3 normalOS;
    float3 diffuseColor;
    float4 extraBuffer; // x: cut, y: distanceFade
    DrawVertex vertices[3];
};

struct IndirectArgs
{
    uint numVerticesPerInstance;
    uint numInstances;
    uint startVertexIndex;
    uint startInstanceIndex;
};

StructuredBuffer<SourceVertex> _SourceVertices;
StructuredBuffer<int> _VisibleIDBuffer;
StructuredBuffer<float> _CutBuffer;
AppendStructuredBuffer<DrawTriangle> _DrawTriangles;
RWStructuredBuffer<IndirectArgs> _IndirectArgsBuffer;

int _NumSourceVertices;
float _Time;
float _GrassRandomHeightMin, _GrassRandomHeightMax;
float _WindSpeed;
float _WindStrength;
float2 _WindDirection;
float _BladeRadius;
float _BladeForward;
float _BladeCurve;
float _BottomWidth;
float _MaxBladesPerVertex;
float _MaxSegmentsPerBlade;
float _MinHeight, _MaxHeight;
float _MinWidth, _MaxWidth;
float _MinFadeDist, _MaxFadeDist;
float _InteractorStrength;
uniform float4 _InteractorData[100];
uniform float _InteractorsLength;
uniform float3 _CameraPositionWS;
float4 _ZonePositions[MAX_ZONES];
float4 _ZoneScales[MAX_ZONES];
float4 _ZoneColors[MAX_ZONES];
float4 _ZoneWidthHeights[MAX_ZONES];
int _ZoneCount;

float grassWidth, grassHeight;

// float4x4 unity_MatrixV;
// float3 GetCameraPositionsWS()
// {
//     return -mul(unity_MatrixV, float4(0, 0, 0, 1)).xyz;
// }

float random(float3 co)
{
    return frac(sin(dot(co.xyz, float3(12.9898, 78.233, 53.539))) * 43758.5453);
}

float RandomRange(float3 seed, float min, float max)
{
    float rand = random(seed);
    return lerp(min, max, rand);
}

uint FastHash(uint x)
{
    x ^= x >> 16;
    x *= 0x7feb352dU;
    x ^= x >> 15;
    x *= 0x846ca68bU;
    x ^= x >> 16;
    return x;
}

uint Hash3Pos(float3 pos, uint index)
{
    uint x = asuint(pos.x * 100);
    uint y = asuint(pos.y * 100);
    uint z = asuint(pos.z * 100);
    uint hash = x ^ (y << 8) ^ (z << 16) ^ index;
    return FastHash(hash);
}

float HashToFloat01(uint hash)
{
    return float(hash & 0xFFFFFF) / 0x1000000;
}

float3x3 AngleAxis3x3(float angle, float3 axis)
{
    float c, s;
    sincos(angle, s, c);

    float t = 1 - c;
    float x = axis.x;
    float y = axis.y;
    float z = axis.z;

    return float3x3(
        t * x * x + c, t * x * y - s * z, t * x * z + s * y,
        t * x * y + s * z, t * y * y + c, t * y * z - s * x,
        t * x * z - s * y, t * y * z + s * x, t * z * z + c);
}

float3x3 CreateTangentToWorld(float3 normal)
{
    float3 tangent;
    if (abs(normal.x) > abs(normal.z))
        tangent = float3(-normal.y, normal.x, 0);
    else
        tangent = float3(0, -normal.z, normal.y);
    tangent = normalize(tangent);

    float3 bitangent = normalize(cross(normal, tangent));

    return float3x3(
        tangent.x, normal.x, bitangent.x,
        tangent.y, normal.y, bitangent.y,
        tangent.z, normal.z, bitangent.z
    );
}

float2 GetSimpleBladePosition(float randValue)
{
    float2 randomValues = float2(randValue, frac(randValue * 1.61803)); // 황금비를 사용하여 다른 랜덤값 생성
    return randomValues - 0.5;
}

bool IsInAnyZone(float3 position, out int zoneIndex)
{
    zoneIndex = -1;
    for (int i = _ZoneCount - 1; i >= 0; i--)
    {
        if (_ZonePositions[i].w < 0.5) continue;

        float3 delta = abs(position - _ZonePositions[i].xyz);
        if (all(delta <= _ZoneScales[i].xyz * 0.5))
        {
            zoneIndex = i;
            return true;
        }
    }
    return false;
}

DrawVertex GrassVertex(float3 positionWS, float width, float height,
                       float offset, float2 uv, float curve, float3 normal, float3x3 rotationMatrix)
{
    DrawVertex output;
    float3x3 tangentToWorld = CreateTangentToWorld(normal);
    float3 localOffset = float3(width, height, curve + offset);
    float3 worldOffset = mul(tangentToWorld, localOffset);
    worldOffset = mul(rotationMatrix, worldOffset);
    output.positionWS = positionWS + worldOffset;
    output.uv = uv;
    return output;
}

half3 CalculationWind(half3 positionWS, half grassHeight, half distanceFade)
{
    half timeWind = _Time * _WindSpeed;

    // 기본 wind 계산
    half windValue = sin(timeWind + dot(positionWS.xz, _WindDirection));

    // 거리에 따른 복잡도 직접 보간 (가까울수록 1.0, 멀수록 0.5)
    half complexityFactor = lerp(0, 1.0, distanceFade);
    windValue *= complexityFactor;

    return half3(_WindDirection.x * windValue, 0, _WindDirection.y * windValue)
        * grassHeight * _WindStrength;
}

float3 CalculateInteraction(float3 grassPosition, half grassHeight)
{
    float3 totalBend = float3(0, 0, 0);

    for (int i = 0; i < _InteractorsLength; i++)
    {
        float3 interactorPos = _InteractorData[i].xyz;
        float interactorRadius = _InteractorData[i].w;
        float3 distanceVector = grassPosition - interactorPos;
        float distance = length(distanceVector);

        if (distance < interactorRadius)
        {
            float strength = (1.0 - distance / interactorRadius) * _InteractorStrength * grassHeight;
            float3 bendDirection = normalize(distanceVector);
            bendDirection.y = 0;
            totalBend += bendDirection * strength;
        }
    }
    return totalBend;
}

[numthreads(256, 1, 1)]
void Main(uint id : SV_DispatchThreadID)
{
    if ((int)id >= _NumSourceVertices) return;

    int visibleID = _VisibleIDBuffer[id];
    if (visibleID == -1) return;

    SourceVertex sv = _SourceVertices[visibleID];

    half distanceFromCamera = distance(sv.positionWS, _CameraPositionWS);
    half distanceFade = 1 - saturate((distanceFromCamera - _MinFadeDist) / (_MaxFadeDist - _MinFadeDist));
    if (distanceFade < 0) return;

    half3 grassNormal = normalize(sv.normalOS);

    uint localVertexCount = 0;
    half cut = _CutBuffer[visibleID];

    uint heightHash = Hash3Pos(sv.positionWS, 0);
    half randomOffset = lerp(_GrassRandomHeightMin, _GrassRandomHeightMax, HashToFloat01(heightHash));

    grassWidth = sv.uv.x;
    grassHeight = sv.uv.y;

    grassHeight = clamp(grassHeight + randomOffset, _MinHeight, _MaxHeight);
    grassWidth = clamp(grassWidth, _MinWidth, _MaxWidth);

    int zoneIndex;
    half3 baseColor = sv.color;
    if (IsInAnyZone(sv.positionWS, zoneIndex))
    {
        baseColor = _ZoneColors[zoneIndex].rgb;
        grassHeight *= _ZoneWidthHeights[zoneIndex].y;
        grassWidth *= _ZoneWidthHeights[zoneIndex].x;
    }

    half finalSizeFade = lerp(0.3, 1, distanceFade);

    grassWidth *= finalSizeFade * finalSizeFade;
    grassHeight *= finalSizeFade;

    _BladeForward *= grassHeight;

    half3 wind = CalculationWind(sv.positionWS, grassHeight, distanceFade);
    half3 interaction = CalculateInteraction(sv.positionWS, grassHeight);
    half3 finalWind = wind * (1 - length(interaction) / (_InteractorStrength * grassHeight));

    half numTrianglesPerBlade = (_MaxSegmentsPerBlade - 1) * 2 + 1;

    for (int j = 0; j < _MaxBladesPerVertex * distanceFade; j++)
    {
        DrawVertex drawVertices[GRASS_NUM_VERTICES_PER_BLADE];

        uint baseHash = Hash3Pos(sv.positionWS, j);
        float randVar1 = HashToFloat01(FastHash(baseHash));

        half bladeRadius = j / _MaxBladesPerVertex;
        half offset = (1 - bladeRadius) * _BladeRadius;
        half3x3 facingRotationMatrix = AngleAxis3x3(randVar1 * TWO_PI, grassNormal);

        for (int i = 0; i < _MaxSegmentsPerBlade; i++)
        {
            half t = i / _MaxSegmentsPerBlade;
            half segmentHeight = grassHeight * t;
            half segmentWidth = grassWidth * (1 - t);

            segmentWidth = i == 0 ? _BottomWidth * segmentWidth : segmentWidth;

            half3 newPos = i == 0
                               ? sv.positionWS
                               : sv.positionWS + (finalWind + grassNormal * grassHeight + interaction) * t;
            half curveStrength = pow(abs(t), _BladeCurve) * _BladeForward;

            drawVertices[i * 2] = GrassVertex(newPos, segmentWidth, segmentHeight,
                                              offset, half2(0, t), curveStrength, grassNormal, facingRotationMatrix);
            drawVertices[i * 2 + 1] = GrassVertex(newPos, -segmentWidth, segmentHeight,
                                                  offset, half2(1, t), curveStrength, grassNormal,
                                                  facingRotationMatrix);
        }

        half3 topPosOS = sv.positionWS + wind + interaction + grassNormal * grassHeight;
        drawVertices[_MaxSegmentsPerBlade * 2] = GrassVertex(topPosOS, 0, grassHeight, offset,
                                                             half2(0.5, 1), _BladeForward, grassNormal,
                                                             facingRotationMatrix);

        for (int k = 0; k < numTrianglesPerBlade; ++k)
        {
            DrawTriangle tri = (DrawTriangle)0;
            tri.normalOS = grassNormal;
            tri.diffuseColor = baseColor;
            tri.extraBuffer = half4(cut, 0/*distanceFade*/, 0, 0);

            tri.vertices[0] = drawVertices[k];
            tri.vertices[1] = drawVertices[k + 1];
            tri.vertices[2] = drawVertices[k + 2];
            _DrawTriangles.Append(tri);

            localVertexCount += 3;
        }
    }

    InterlockedAdd(_IndirectArgsBuffer[0].numVerticesPerInstance, localVertexCount);
}
